name: Package and Release EXE Files

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release name'
        required: true
        default: 'Release 1.0.0'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Install Requirements
      shell: pwsh
      run: |
        Get-ChildItem -Directory | ForEach-Object {
          if (Test-Path "$($_.FullName)\requirements.txt") {
            pip install -r "$($_.FullName)\requirements.txt"
          }
        }

    - name: Package Python scripts to EXE
      shell: pwsh
      run: |
        Get-ChildItem -Directory | ForEach-Object {
          $latestScript = Get-ChildItem -Path "$($_.FullName)" -Filter *.py | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($latestScript) {
            $scriptName = [System.IO.Path]::GetFileNameWithoutExtension($latestScript.Name)
            $exeName = "$scriptName.exe"
            pyinstaller --onefile --distpath "$($_.FullName)\dist" --workpath "$($_.FullName)\build" --specpath "$($_.FullName)\spec" "$($latestScript.FullName)"
          }
        }

    - name: Get current date in UTC+8
      id: date
      run: echo "CURRENT_DATE=$(TZ=Asia/Shanghai date +'%y.%m.%d')" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ env.CURRENT_DATE }}"
        release_name: "Release ${{ env.CURRENT_DATE }}"
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: |
          Get-ChildItem -Recurse -Filter *.exe | ForEach-Object {
            Write-Output $_.FullName
          }
        asset_name: |
          Get-ChildItem -Recurse -Filter *.exe | ForEach-Object {
            Write-Output $_.Name
          }
        asset_content_type: application/octet-stream
